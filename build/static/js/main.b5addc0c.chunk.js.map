{"version":3,"sources":["components/cell.js","components/board.js","App.js","index.js"],"names":["Cell","value","onClick","x","y","className","NO_PLAYER","Board","useState","boardData","setBoardData","currentPlayer","setCurrentPlayer","winner","setWinner","takeTurn","clonedBoardData","changeCell","checkForTie","reduce","rowCount","row","cellCount","cell","useEffect","winnerSearch","console","log","checkForWinner","toast","map","rowI","cellI","e","target","getAttribute","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b5addc0c.chunk.js","sourcesContent":["export default function Cell({ value, onClick, x, y }) {\r\n  return (\r\n    <span className=\"cell\" onClick={onClick} x={x} y={y}>\r\n      {value}\r\n    </span>\r\n  );\r\n}\r\n","import { useState, useEffect } from \"react\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport Cell from \"./cell\";\r\nimport \"./style.css\";\r\n\r\nconst NO_PLAYER = \"-\";\r\nconst TIE_PLAYER = \"Nobody\";\r\nconst PLAYER_1 = \"X\";\r\nconst PLAYER_2 = \"O\";\r\n\r\nexport default function Board() {\r\n  const [boardData, setBoardData] = useState([\r\n    [NO_PLAYER, NO_PLAYER, NO_PLAYER],\r\n    [NO_PLAYER, NO_PLAYER, NO_PLAYER],\r\n    [NO_PLAYER, NO_PLAYER, NO_PLAYER],\r\n  ]);\r\n  const [currentPlayer, setCurrentPlayer] = useState(NO_PLAYER);\r\n  const [winner, setWinner] = useState(NO_PLAYER);\r\n\r\n  const changeCell = (x, y, value) => {\r\n    if (boardData[y][x] !== NO_PLAYER) return;\r\n    let clonedBoardData = [...boardData];\r\n    clonedBoardData[y][x] = value;\r\n    setBoardData(clonedBoardData);\r\n  };\r\n\r\n  const changePlayer = () => {\r\n    setCurrentPlayer(currentPlayer === PLAYER_1 ? PLAYER_2 : PLAYER_1);\r\n  };\r\n\r\n  const takeTurn = (x, y) => {\r\n    if (winner !== NO_PLAYER) return;\r\n    changeCell(x, y, currentPlayer);\r\n  };\r\n\r\n  const checkForWinner = () => {\r\n    // Rows\r\n    for (let y = 0; y < 3; y++) {\r\n      let winnerSearch = boardData[y][0];\r\n      console.log(winnerSearch);\r\n      for (let x = 1; x < 3; x++) {\r\n        if (boardData[y][x] !== winnerSearch) {\r\n          winnerSearch = NO_PLAYER;\r\n        }\r\n      }\r\n      if (winnerSearch !== NO_PLAYER) {\r\n        return setWinner(winnerSearch);\r\n      }\r\n    }\r\n    // Columns\r\n    for (let x = 0; x < 3; x++) {\r\n      let winnerSearch = boardData[0][x];\r\n      for (let y = 1; y < 3; y++) {\r\n        if (boardData[y][x] !== winnerSearch) {\r\n          winnerSearch = NO_PLAYER;\r\n        }\r\n      }\r\n      if (winnerSearch !== NO_PLAYER) {\r\n        return setWinner(winnerSearch);\r\n      }\r\n    }\r\n    // Diagonals\r\n    if (\r\n      boardData[0][0] === boardData[1][1] &&\r\n      boardData[0][0] === boardData[2][2]\r\n    ) {\r\n      return setWinner(boardData[0][0]);\r\n    }\r\n    if (\r\n      boardData[0][2] === boardData[1][1] &&\r\n      boardData[0][2] === boardData[2][0]\r\n    ) {\r\n      return setWinner(boardData[0][2]);\r\n    }\r\n    checkForTie();\r\n  };\r\n\r\n  const checkForTie = () => {\r\n    if (\r\n      boardData.reduce(\r\n        (rowCount, row) =>\r\n          row.reduce(\r\n            (cellCount, cell) =>\r\n              cell !== NO_PLAYER ? cellCount + 1 : cellCount,\r\n            0\r\n          ) === 3\r\n            ? rowCount + 1\r\n            : rowCount,\r\n        0\r\n      ) === 3\r\n    ) {\r\n      setWinner(TIE_PLAYER);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    changePlayer();\r\n    checkForWinner();\r\n  }, [boardData]);\r\n\r\n  useEffect(() => {\r\n    if (winner === NO_PLAYER) return;\r\n    toast(`${winner} has won!`);\r\n  }, [winner]);\r\n\r\n  return (\r\n    <div className=\"board\">\r\n      {boardData.map((row, rowI) => (\r\n        <div className=\"row\" key={`row-${rowI}`}>\r\n          {row.map((cell, cellI) => (\r\n            <Cell\r\n              value={cell}\r\n              key={`cell-${rowI}-${cellI}`}\r\n              x={cellI}\r\n              y={rowI}\r\n              onClick={(e) =>\r\n                takeTurn(e.target.getAttribute(\"x\"), e.target.getAttribute(\"y\"))\r\n              }\r\n            />\r\n          ))}\r\n        </div>\r\n      ))}\r\n      <ToastContainer\r\n        position=\"bottom-right\"\r\n        autoClose={5000}\r\n        hideProgressBar={false}\r\n        newestOnTop={false}\r\n        closeOnClick\r\n        rtl={false}\r\n        pauseOnFocusLoss\r\n        draggable\r\n        pauseOnHover\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import Board from \"./components/board\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Board />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}